/**
 * # Ashigaru
 *
 * Copyright (c)2011, by Branko Vukelic <branko@herdhound.com>
 *
 * jQuery plugin for making requests to Samurai payment gateway via a hidden 
 * iframe.
 *
 * Ashigaru is part of Daimyo (https//github.com/HerdHound/Daimyo).
 *
 * ## About the JSON parser
 *
 * Ashigaru requires either a native JSON parser, or a 3rd party solution.
 *
 * If your environment (browser(s) you intend to support) does not provide the
 * native JSON object, you can use the Crockford's implementation found on
 * [on Github](https://github.com/douglascrockford/JSON-js/blob/master/json2.js).
 *
 * ## Preparing the server
 *
 * Before you can use this plugin, you must make sure that a valid redirect URL
 * is handled on your server. Once Samurai gateway receives data from this 
 * plugin, it will redirect the user to the redirect URL. The redirect URL will
 * have an URL parameter called `payment_method_token` which should be a 
 * 24-digit hexdigest. That token identifies the payment method created by the
 * user. (See the documentation for the `daimyo` module for more information
 * on how to use this token.)
 *
 * Once you have performed any operations you want, you can respond to the 
 * request that was made to the redirect URL. The response should be text/html,
 * and it should contain at least the `<body>` tag, and a single `<script>` tag
 * that contains the JSON response. A typical success response may look like 
 * this:
 *
 *     <body><script>({"status": "ok"})</script></body>
 *
 * Note that the JSON is wrapped in brackets to make it a valid object 
 * expression. Otherwise, the browsers will complain.
 *
 * There is no need to add standard HTML markup because this response will
 * never be rendered. Once you have set up the server-side handler to work this
 * way, you are ready to start using Ashigaru.
 *
 * ## Basic usage
 *
 * Generally, it is expected that you will take care of the user-facing form
 * yourself, validate the input, and extract the data into an object. The 
 * object should have the following properties:
 *
 *  + _firstName_: cardholder's first name (optional)
 *  + _lastName_: cardholder's last name (optional)
 *  + _address1_: cardholder's address line 1 (optional)
 *  + _address2_: cardholder's address line 2 (optional)
 *  + _city_: city (optional)
 *  + _state_: state or region (optional)
 *  + _country_: country (optional)
 *  + _zip_: zip/postal code (optional)
 *  + _number_: card number (required)
 *  + _csc_: card security code, CCV, CVV, CVC, etc (required)
 *  + _year_: expiration year (optional)
 *  + _month_: expiration month (optional)
 *
 * As you can see, only card number and CSC (a.k.a CCV, CVC, CVV) are required,
 * and other fields are optional. To increase the chance of transactions 
 * actually clearing, and minimize your liability in case of trouble, you 
 * should try to collect as much data as possible, but cardholder name, zip, 
 * and address line 1 are probably bare minimum.
 *
 * Once you have created the object containing the cardholder data, you can 
 * call Ashigaru like this:
 *
 *     $.ashigaru(cardData, merchantKey, redirectURL, function(err, data) {
 *       // err means there was an error parsing the JSON or no data
 *       // was ever returned. If all went fine, err should be null.
 *       // data will contain a fully parsed JSON response.
 *     });
 *
 * Ashigaru currently has no mechanisms for retrying a failed connection. You 
 * should make sure you handle such unforeseen problems yourself.
 *
 * @version 0.0.1
 * @author Branko Vurkelic <branko@herdhound.com>
 * @license MIT (see LICENSE)
 */(function(a,b){function h(){setTimeout(function(){a("iframe[name=samurai-iframe]").remove()},1)}function g(b){var c=a('<iframe src="" name="samurai-iframe" style="display:none"></iframe>');c.appendTo("body"),c.load(function(){f(this,b),e()});return!0}function f(b,c){var d=a(b).contents(),f;e(),f=a.trim(d.find("body script").text());if(f.slice(0,2)!=="({"&&f.slice(-2)!=="})")c("Could not find JSON data");else{f=f.slice(1,-1);try{c(null,JSON.parse(f))}catch(g){c(g)}}}function e(){a("#samurai-form").remove(),h()}var c=b.document.domain,d="https://samurai.feefighters.com/v1/payment_methods";a.ashigaru=function(b,c,e,f){var h;if(!b||!c||!e||!f)throw"All arguments are required";var i={firstName:"",lastName:"",address1:"",address2:"",city:"",state:"",zip:"",number:"",csc:"",year:"",month:""};a.extend(i,b);var j='<form id="samurai-form" style="display:none" action="$requestURI" method="POST" target="samurai-iframe"><input type="hidden" name="merchant_key" value="$merchantkey"><input type="hidden" name="redirect_url" value="$redirecturl"><input type="hidden" name="credit_card[first_name]" value="$firstName"><input type="hidden" name="credit_card[last_name]" value="$lastName"><input type="hidden" name="credit_card[address_1]" value="$address1"><input type="hidden" name="credit_card[address_2]" value="$address2"><input type="hidden" name="credit_card[city]" value="$city"><input type="hidden" name="credit_card[state]" value="$state"><input type="hidden" name="credit_card[zip]" value="$zip"><input type="hidden" name="credit_card[card_number]" value="$number"><input type="hidden" name="credit_card[card_type]" value="$issuer"><input type="hidden" name="credit_card[cvv]" value="$csc"><input type="hidden" name="credit_card[expiry_year]" value="$year"><input type="hidden" name="credit_card[expiry_month]" value="$month"></form>';j=j.replace("$requestURI",d),j=j.replace("$merchantkey",c),j=j.replace("$redirecturl",e);for(var k in i)i.hasOwnProperty(k)&&(j=j.replace("$"+k,i[k]));h=a(j);if(h.attr("action")==="$requestURI")throw"Form error";h.appendTo("body"),h.unbind("submit"),h.submit(function(a){a.stopPropagation();return g(f)}),h.submit()}})(jQuery,this)
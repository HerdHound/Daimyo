# Daimyo: Samurai payment gateway integration library

v0.0.1

Copyright (c)2011, by Branko Vukelic <branko@herdhound.com>.

Some rights reserved.

Licensed under MIT license (see
[LICENSE](https://github.com/HerdHound/Daimyo/blob/master/LICENSE))

## Overview

Daimyo (pronounced as _dah-e-myoh_) is a client library for the 
[Samurai payment gateway](http://feefighters.ca/samurai) from
[Fee Fighters](http://feefighters.com/). By the time 1.0 release is made,
Daimyo will support all of Samurai's API, but the current immediate goal is to
support the sale transactions and provide robust error reporting facilities.

## Status

This library will be used in production at 
[Herd Hound](http://www.herdhound.com/). Since Herd Hound itself is not yet
released, this library has not yet seen any production use. We therefore
recommend you test it well before Using it in production.

## Installation

TODO

## Basic usage

TODO

## Using the ``check`` as AMD module in browsers

The `lib/check.js`` module contains generic functions for performing various
checks on credit cards. It performs Luhn Mod-10 check to ensure that the card
number is valid (although the card itself may not be valid), get the name of
the issuer, or make sure that the CSC (also called CVV, CVC, or CCV) has the
right number of digits, etc. It is always a good idea to perform this check
browser-side to ensure that obviously invalid cards do not make it to the
system, or that any typing errors are caught early on.

This module can be used in browsers with minimal modifications. For
convenience, the ``checkamd`` target is provided in the makefile, which builds
an AMD module compatible with loaders like [RequireJS](http://requirejs.org/).

To build the AMD version of check, simply type:

    make checkamd

This will result in creation of a new file called ``check.js`` in the project
directory. The file is not minified. If you want to minify it, you can use
tools such as [UglifyJS](https://github.com/mishoo/UglifyJS).

To use it, simply require it from your module as usual:

    // mymodule.js
    define(['jquery', 'check'], function($, check) {
        var cardNumber = $('input[name=card]).val();
        var csc = $('input[name=csc]').val();
        
        var isVaild = check.mod10check(cardNumber) ? true : false;
        var isValid = isValid && check.cscCheck(cardNumber, csc) ? true : false
        
        var issuer = check.getIssuer(cardNumber);
        alert('Your card was issued by ' + issuer);
    });

You can find more details on this module in the 
[API documentation](http://herdhound.github.com/Daimyo/).

## API documentation

The dox-generated API documentation can be found at
[herdhound.github.com/Daimyo/](http://herdhound.github.com/Daimyo/). You can
also generate the documentation for offline use using the provided makefile.
See _Offline documentaiton_ section for instructions.

## Offline documentation

You can generate offline documentation for Daimyo using the
[dox](https://github.com/visionmedia/dox/) utility from Visionmedia. Install
dox by typing:

    sudo npm install dox -g

Now you can simpy type ``make docs`` in the project directory. The
documentation will be generated in a newly created ``docs`` directory. To
remove the documentation, just type ``make clean``.

## Running unit tests

To run unit tests you need [Expresso](https://github.com/visionmedia/expresso),
and [should.js](https://github.com/visionmedia/should.js). You also need to
create a file called `test/config.js`, and add your keys there:

    exports.merchantKey = 'xxxxxxxxxxxxxxxxxxxxxxxx';
    exports.apiPassword = 'xxxxxxxxxxxxxxxxxxxxxxxx';
    exports.processorId = 'xxxxxxxxxxxxxxxxxxxxxxxx';

The tests are run simply by simply typing `make` in the project directory.
Alternatively, you can type:

    expresso /test/*.tests.js

Do not run tests with your live processor. Make sure you are running in a
sandbox.

## Reporting bugs

You may use the [issue tracker](https://github.com/HerdHound/Daimyo/issues) to
report Daimyo bugs you find. Alternatively, you may contact the author directly
at [branko@herdhound.com](mailto:branko@herdhound.com). Of course, feature
requests are also welcome, but currently, the basic functionality is top
priority.

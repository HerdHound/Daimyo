## Getting started

Fee Figters' [Samurai](http://feefighters.com/samurai) payment gateway is
currently in beta. Before joining the beta program and getting an account, it
is highly recommended that you get your merchant account first. After signing
up with Samurai, you will receive three HEX tokens:

 + Merchant key - used to identify your account on Samurai
 + API password - password for you Samurai account
 + Processor ID - the ID of the gateway that you will use for transactions

Initially, you will receive a sandbox processor ID. The sandbox is used for
testing, and you cannot actually process transactions using the sandbox. Keep
in mind that you should only run unit tests that come with Daimyo using the
sandbox processor ID.


### Overview

When using the Samurai payment gateway, you basically deal with two separate
concepts: payment methods (cards) and transactions (making/loosing money).
Daimyo's API reflects this dualism. It provides two main constructors that you
will use most of the time: `Card` and `Transaction` (and variants of
`Transaction`).

Once created the card objects have the following methods:

 + `card.create()`: cretes a new payment methods
 + `card.load()`: fetches payment method data from the Samurai vault
 + `card.update()`: updates the payment method details
 + `card.retain()`: instructs Samurai to permanently save the payment method
 + `card.redact()`: instructs Samurai to remove the payment method from vault

(See notes about PCI compliance before you start using some of these methods.)

The transaction object is constructed using several constructors (they are not
yet available, though) that are specialized for different types of
transactions, or the generic `Transaction` constructor. In each case, the
constructor only has one method:

 + `transaction.process()`

This method takes a card object as its argument, and runs a transaction against
the payment method associated with the card.

### Notes on PCI compliance

There are two ways you can use the Samurai gateway with Daimyo in terms of
payment method. One is server-to-server, where you handle the cardholder data,
and pass them on to the gateway. Another method is transparent redirect, where
you set up a web form that submits directly to the gateway, and you only
receive a _payment method token_ that is associated with whatever data the 
user submitted. 

While the server-to-server method is useful in cases a web form required for
transparent redirect method cannot be set up (for example, for single-page AJAX
apps, where cross-site request restrictions apply), you have to be aware that
full PCI compliance for class C merchants is still required. Class C PCI
compliance may involve on-site audits, or audits of any 3rd party
infrastructure you might be using, and many other steps. You can read more
about PCI compliance at
[www.pcisecuritystandards.org](https://www.pcisecuritystandards.org/).

Also note that Daimyo itself has _not_ been atested or tested for PCI
compliance. While Daimyo's author sincerely believes that Daimyo is reasonably
safe (or, rather, will be when a full release is made), we do not, and cannot
make any guarantees to that effect, either explicit or implied, as noted in the
[LICENSE](https://github.com/HerdHound/Daimyo/blob/master/LICENSE).

### Ashigaru and single-page AJAX apps

If you have an AJAX-intesive website that cannot make regular POST requests
using web forms, you might want to try using the Ashigaru jQuery plugin. The
plugin is included in the Daimyo project directory under `/support`
subdirectory. For more information on how to set up your server for use with
Ashigaru, and basic usage of this plugin, take a look at Ashigaru's
documentation. You can also find a 
[functional demo](http://herdhound.github.com/Daimyo/example/ashigaru/) online.

### Configuration

Before you use any of the Daimyo's functions, you should configure Daimyo.

    var daimyo = require('daimyo');

    daimyo.configure({
      merchantKey: 'xxxxxxxxxxxxxxxxxxxxxxxx',
      apiPassword: 'xxxxxxxxxxxxxxxxxxxxxxxx',
      processorId: 'xxxxxxxxxxxxxxxxxxxxxxxx'
    });

Samurai gatway uses transparent redirect method to process credit card
information. The way it works is, user submits the card and billing data
directly to Samurai, and it redirects the user back to your site attaching a
payment method token to the request. You have to access to credit card data in
any part of the work flow. Daimyo provides a `create` method, which allows you
to create a payment method without using the transparent redirect. You may use
this method if you really cannot use the transparent redirect, and you find
Ashigaru to be broken or otherwise unusable for you. You should keep in mind,
though, that you have to ensure that sensitive data passing through your site
is properly secured.  Use SSL for every connection that passes sensitive data,
and do not use GET requests for such requests. Also make sure that no sensitive
data is logged or stored in any part of your application.

One of the configuration options is `debug`, which enables logging of _all_ 
data that passes through Daimyo. While it is disabled by default, you should
take utmost care to ensure it remains disabled in production. Double-check
you app's configuration.

### Configuration locking

Note that Daimyo's performs configuration-locking after you call
`daimyo.configure()` for the first time (and if that's successful). This
means that you will not be able to call `daimyo.configure()` multiple times
to set different options. You need to set all options beforehand. 

This is a security feature that prevents accidental/malicious resetting of
critical options. 

Calling `daimyo.option()` will also fail after configuration has been locked,
but you can use multiple calls to `daimyo.options()` to set an option
multiple times and it won't lead to locking.

Althoug using `daimyo.option()` may sound more convenient, you should set all
critical core options (including `debug`, `enabled`, and `sandbox`) using the
`daimyo.configure()` method for security reasons.

Currently, the only exception to configuration locking is the `currency`
parameter, which can be set any number of times. Future version of Daimyo may
include more such non-critical options.

See the ``config`` module documentation for more information.

### Card object

If you chose to use the server-to-server method of creating payment methods,
you can create a new payment method using the `create` method. Suppse you have
received billing and creadit card data from your user. You can now create a new
Card object use that data.

    var card = new daimyo.Card({
      number: data.cardNumber,
      csc: data.csc,
      firstName: data.firstName,
      lastName: data.lastName,
      year: data.expirationYear,
      month: data.expirationMonth,
      ....
    });

The card object has following fields:

 + _number_: card number
 + _csc_: card security code (called CCV, CVC, CVV, and various other names)
 + _year_: expiration year (if any)
 + _month_: expiration month
 + _firstName_: card holder's first name
 + _lastName_: card holder's last name
 + _address1_: billing address line 1
 + _address2_: billing address line 2
 + _city_: billing address city
 + _state_: billing address state/region
 + _zip_: billing address zip/postal code

You cannot create a card object unless you supply it a payment token, or credit 
card number and CSC. If you supply it a token, all other fields are ignored. 
Otherwise, card number and CSC are required, and you will get an error if you
do not specify them. If you create a card object with credit card and billing
details, you will get one more field:

 + _issuer_: name of the credit card's issuer

The issuer is detected from the card number, and you should not set the field
manually (or allow the user to set it).

### Basic validation

Once you've created the card object, you can test its validity:

    card.isValid(); // returns true if card is valid
    card.isExpired(); // returns true if expired

### Creating the payment method server-side

The card, when initilized, is still not a valid _payment method_. You have to
actually create in on Samurai gateway in order to make purchases. You can do 
that like so:

    card.create(function(err) {
      // Handle errors
      // Card now has a payment method token associated with it
      console.log(card.token);
    });

### Loading the payment method

Now that the card object has a token associated with it, you can either save
the token, or perform transactions with it. So, let's say you have stored the 
payment token, either when doing the transparent redirect, or after you created
the payment method using the `create` method. You can now use the `load` method
to fetch payment method details from Samurai server.

    var myToken = 'xxxxxxxxxxxxxxxxxxxxxxxx';
    var card = new daimyo.Card({token: myToken});
    card.load(function(err) {
      // Handle error
    });

The card object has all the fields populated. There are also two new fields:

 + messages: contains any Samurai gateway messages about the card
 + method: contains meta-information about the payment method

See the API documentation for details on what these fields contain.

### Updating the payment method

If you want to update the card details, you can do so using the `update` 
method:

    card.firstName = 'Foo';
    card.lastName = 'Bar';
    card.address1 = '241 Bar St.';
    card.city = 'Fooville';
    card.update(function(err) {
      // Handle errors here
    });

### Retention and redaction

Samurai has a built-in vault that can safely store your payment methods. Well,
they aren't yours, but... you know what I mean. :) Usage of this vault is
pretty much automatic. As soon as you create a new card, it is stored in the
vault.

By default, the stored payment methods will be deleted after 48 hours. If you
wish to keep the payment methods stored for longer periods, you can use the
`retain()` method. Let's say you have a newly created card. To retain it,
simply instruct the Samurai to do so:

    card.retain(function(err) {
      // Error handling here
      // The card now has a method property, 
      // which contains metadata about
      // the payment method. It has a `retained`
      // property which is now set to true:
      console.log(card.method.retained); // => true
    });

When your user supplies you a new card, or simply wants you to remove their 
records, use the `redact()` method to have the card removed from the Samurai
vault.

    card.redact(function(err) {
       // The card.method.retained is still true, but
       // card.method.redacted is now also true.
    });

Generally, you should not keep using a redacted payment method, so make sure
you check if the `card.method.redacted` is `true`. Updating the card data is
usually more efficient using the `update()` method. While it _is_ more
effiicient, if you are using the transparent redirect method, you should 
redact the old card, and let the user enter a new one. Only use `update()` if 
you are using the server-to-server method.

REST OF THE DOCS IS ON TODO LIST, SORRY!
